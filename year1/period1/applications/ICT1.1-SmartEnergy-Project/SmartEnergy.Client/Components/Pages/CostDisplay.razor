@page "/costDisplay"
@attribute [StreamRendering]
@inject IMeasurementRepository measurementRepository;
@inject ILogger<CostDisplay> Logger
@rendermode InteractiveServer

<PageTitle>CostDisplay</PageTitle>

@* https://demos.blazorbootstrap.com/form/date-input *@
<header>
    <h1>Martijn van Houwelingen.</h1>

    <p>Dit is de beschrijving.</p>
</header>
<main>
    <section style="display:flex; column-gap: 1rem;">
        <form method="post" @onsubmit="Submit" @formname="starship-plain-form" id="myForm">
            <AntiforgeryToken />
            <div style="row-gap: 1rem; flex-wrap: wrap; flex-direction: column;">
                <div class="input-group" style="column-gap: 1rem; flex-wrap: nowrap;">
                    <div class="input-group">
                        <label for="meterId">Meter ID:</label>
                        <div class="input-group mb-3" style="flex-wrap: nowrap;">
                            <span class="input-group-text">2019-ETI-EMON-V01-</span>
                        
                            <InputText @bind-Value="ActiveSettings!.machineIdentifier" id="machineIdentifier" />
                            <span class="input-group-text">-16405E</span>
                        </div>
                    </div>
                    <div class="input-group">
                        <label for="cost">Cost per KWH:</label>
                        <div class="mb-3 input-group">
                            <span class="input-group-text">â‚¬</span>
                            <InputNumber @bind-Value="ActiveSettings!.cost" class="form-control" placeholder="Value per hour"  id="cost" step="0.01" />
                        </div>
                    </div>
                </div>
                <div class="input-group" style="column-gap: 1rem; flex-wrap: nowrap;">
                    <div class="mb-3">
                        <InputDate @bind-Value="ActiveSettings!.date1" TValue="DateTime" Placeholder="Enter start Date" id="date1" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <InputDate @bind-Value="ActiveSettings!.date2" TValue="DateTime" Placeholder="Enter end Date" id="date2" class="form-control" />
                    </div>
                </div>
            </div>
            <div>
                <button type="submit" id="submitButton">Refresh</button>
            </div>
        </form>
    </section>
    @if (measurements == null)
    {
        <p><em>Data wordt geladen...</em></p>
    }
    else
    {
    <LineChart @ref="lineChart" />
    <!--
        When the measurements variable has values in it we will draw a table with a header (thead) and
        add the data to the table (tbody). We use the foreach to loop over te list of measurements and
        a single line <tr> is added for each of the indivudial measurement objects. Colums are seperated
        using <th> for the header or <td> for the body as you can see in the code below.
    -->
    <table class="table">
        <thead>
        <tr>
            <th>Timestamp (UTC)</th>
            <th>Location ID</th>
            <th>Sensor</th>
            <th>Value</th>
            <th>Unit</th>
            <th>Price (energy only)</th>
            <th>Temperature</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var measurement in measurements)
        {
        <tr>
            <td>@measurement.Timestamp</td>
            <td>@measurement.LocationId</td>
            <td>@measurement.Sensor</td>
            <td>@measurement.Value</td>
            <td>@measurement.Unit</td>
            <td>@measurement.EnergyPrice</td>
            <td>@measurement.Temperature</td>
        </tr>
        }
        </tbody>
    </table>
    }
</main>
<style>
    header {
        background-color: aqua;
    }
</style>

@code {
    [SupplyParameterFromForm]
    private Settings? ActiveSettings { get; set; }
    protected override void OnInitialized() => ActiveSettings ??= new();
    private List<Measurement>? measurements;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("My debug output.");
        
        int meterId = hexStringToInt(ActiveSettings.machineIdentifier);

        int numberOfDays = 3;
        
        string aggegationWindow = "5m";

        measurements = await this.measurementRepository.GetEnergyConsumed(meterId, numberOfDays, aggegationWindow);
        
        if (measurements != null)
        {
            await RenderMyGraph();
        }
    }
    
    private LineChart lineChart = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // if (firstRender)
        // {
        //     await RenderWormAsync();
        // }
        //
        // await base.OnAfterRenderAsync(firstRender);
    }

    private int hexStringToInt(string hexString)
    {
        return int.Parse(hexString, System.Globalization.NumberStyles.HexNumber);
    }

    private async Task Submit()
    {
        Logger.LogInformation("Id = {Id}", ActiveSettings?.machineIdentifier);
        Logger.LogInformation("Cost = {Cost}", ActiveSettings?.cost);
        Logger.LogInformation("Date = {Date}", ActiveSettings?.date1);

        // Set flag to show data
        int meterId = hexStringToInt(ActiveSettings.machineIdentifier);

        

        int numberOfDays = 3;
        
        string aggegationWindow = "5m";
        // Load data (measurements) asynchronously before rendering the graph
        measurements = await this.measurementRepository.GetEnergyConsumed(meterId, numberOfDays, aggegationWindow);

        // If data is successfully fetched, render the graph
        if (measurements != null)
        {
            await RenderMyGraph();
        }

        // Trigger a state update to ensure the UI is updated after data load
        StateHasChanged();
    }


    public async Task RenderMyGraph()
    {
        await RenderWormAsync();
        await base.OnAfterRenderAsync(true);
    }

    public class Settings
    {
        public string? machineIdentifier { get; set; }
        public double? cost { get; set; }
        public DateTime date1 { get; set; }
        public DateTime date2 { get; set; }

        public Settings()
        {
            machineIdentifier = "17E437";
            cost = 0.25;
            date1 = DateTime.Now.AddDays(-7);
            date2 = DateTime.Now;
        }
    }
    
    private async Task RenderWormAsync()
    {
        var data = new ChartData
            {
                Labels = new List<string> { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" },
                Datasets = new List<IChartDataset>()
                {
                    new LineChartDataset()
                    {
                        Label = "India",
                        Data = new List<double?>{ 9, 20, 29, 33, 50, 66, 75, 86, 91, 105, 120, 126, 141, 150, 156, 164, 177, 180, 184, 195 },
                        BackgroundColor = "rgb(88, 80, 141)",
                        BorderColor = "rgb(88, 80, 141)",
                        BorderWidth = 2,
                        HoverBorderWidth = 4,
                        //PointBackgroundColor = "rgb(88, 80, 141)",
                        //PointBorderColor = "rgb(88, 80, 141)",
                        //PointRadius = 0, // hide points
                        //PointHoverRadius = 4,
                    },
                    new LineChartDataset()
                    {
                        Label = "England",
                        Data = new List<double?>{ 1, 1, 8, 19, 24, 26, 39, 47, 56, 66, 75, 88, 95, 100, 109, 114, 124, 129, 140, 142 },
                        BackgroundColor = "rgb(255, 166, 0)",
                        BorderColor = "rgb(255, 166, 0)",
                        BorderWidth = 2,
                        HoverBorderWidth = 4,
                        // PointBackgroundColor = "rgb(255, 166, 0)",
                        // PointBorderColor = "rgb(255, 166, 0)",
                        // PointRadius = 0, // hide points
                        // PointHoverRadius = 4,
                    }
                }
            };

        var options = new LineChartOptions();

        options.Interaction.Mode = InteractionMode.Index;

        options.Plugins.Title!.Text = "WORM";
        options.Plugins.Title.Display = true;
        options.Plugins.Title.Font = new ChartFont { Size = 20 };

        options.Responsive = true;

        options.Scales.X!.Title = new ChartAxesTitle { Text = "Overs", Display = true };
        options.Scales.Y!.Title = new ChartAxesTitle { Text = "Runs", Display = true };

        if (lineChart != null)
        {
        await lineChart.InitializeAsync(data, options);
        }
    }
}
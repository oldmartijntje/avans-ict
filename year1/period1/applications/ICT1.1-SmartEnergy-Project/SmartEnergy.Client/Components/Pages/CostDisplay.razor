@page "/costDisplay"
@attribute [StreamRendering]
@inject IMeasurementRepository measurementRepository;
@inject ILogger<CostDisplay> Logger
@using System.Globalization;
@rendermode InteractiveServer

<PageTitle>CostDisplay</PageTitle>

@* https://demos.blazorbootstrap.com/form/date-input *@
<header class="anti-padding">
    <h1>Martijn van Houwelingen.</h1>

    <div>
        <p>Mijn algorithme analyseerd je data, en kijkt naar hoeveel je betaald voor je stroomgebruik.</p>
        <ol>
            <li>Haal de data op van je machine, voor de gekozen tijd periode.</li>
            <li>Bekijk bij elk uur hoeveel je stroom verbruikte.</li>
            <li>Vermenigvuldig dit stroomgebruik met de kosten van dat uur.</li>
            <li>Tel het bij elkaar op voor de totale kosten.</li>
        </ol>
        <p>Op deze manier wordt de stroomkosten berekend. Voor de statische kosten gebeurt het zelfde, alleen dan is het
            altijd de zelfde kosten bij stap 3.</p>
    </div>
</header>
<div id="mainContent">
    <section style="display:flex; column-gap: 1rem;" id="settingsSelector">
        <form method="post" @onsubmit="Submit" @formname="starship-plain-form" id="myForm">
            <AntiforgeryToken />
            <div style="row-gap: 1rem; flex-wrap: wrap; flex-direction: column;">
                <div class="input-group" style="column-gap: 1rem; flex-wrap: nowrap;">
                    <div class="input-group">
                        <label for="meterId">Meter ID:</label>
                        <div class="input-group mb-3" style="flex-wrap: nowrap;">
                            <span class="input-group-text">2019-ETI-EMON-V01-</span>

                            <InputText @bind-Value="ActiveSettings!.machineIdentifier" id="machineIdentifier" />
                            <span class="input-group-text">-16405E</span>
                        </div>
                    </div>
                    <div class="input-group">
                        <label for="cost">Static costs per KWH:</label>
                        <div class="mb-3 input-group">
                            <span class="input-group-text">€</span>
                            <InputNumber @bind-Value="tempCost" class="form-control" placeholder="Value per hour"
                                id="cost" step="0.01" />
                        </div>
                    </div>
                </div>
                <div class="input-group">
                    <div class="mb-3">
                        <InputDate @bind-Value="ActiveSettings!.date" TValue="DateTime" Placeholder="Enter start Date"
                            id="date" class="form-control" />
                    </div>
                    <div class="mb-3" style="margin-left: 0.5rem;">
                        <InputDate @bind-Value="@today" TValue="DateTime" Placeholder="Enter end Date" disabled="true"
                            id="dateNow" class="form-control" />
                    </div>
                    <div class="mb-3" style="margin-left: 1.5rem;">
                        <button type="submit" class="btn btn-primary" id="submitButton">Refresh</button>
                    </div>
                </div>
            </div>
        </form>
    </section>

    <hr class="solid anti-padding">
    <section id="pageContent">
        @if (error)
        {
            <p><em>404, Meter doesn't exist...</em></p>
        }
        else if (measurements == null)
        {
            <p><em>Loading data...</em></p>
        }
        else
        {
            <div class="d-flex flex-nowrap">
                <div class="order-1 p-2 col">
                    <LineChart @ref="lineChart" />
                </div>
                <div class="table order-2 p-2 col-sm" style="max-height: 400px; overflow-y: scroll">
                    <table style="width: 100%;" class="custom-table">
                        <thead>
                            <tr>
                                <th>Timestamp (UTC)</th>
                                <th>Energy Usage</th>
                                <th>€@ActiveSettings.GetCost() * KWH</th>
                                <th>Cost Dynamic</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Total</td>
                                <td>@RoundWithDecimal(dailyMeasurements[0].totalEnergy, 2)KWH</td>
                                <td>€@RoundWithDecimal(dailyMeasurements[0].GetTotalCost((double)ActiveSettings.GetCost())[1],
                                            2)</td>
                                <td>€@RoundWithDecimal(dailyMeasurements[0].GetTotalCost((double)ActiveSettings.GetCost())[0],
                                            2)</td>
                            </tr>
                            @foreach (var measurement in dailyMeasurements)
                            {

                                <tr>
                                    <td>@measurement.date.ToString("dd-MM-yyyy")</td>
                                    <td>@RoundWithDecimal(measurement.totalEnergyToday, 2)KWH</td>
                                    <td>€@RoundWithDecimal(measurement.GetDayCost((double)ActiveSettings.GetCost())[1], 2)</td>
                                    <td>€@RoundWithDecimal(measurement.GetDayCost((double)ActiveSettings.GetCost())[0], 2)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <hr class="solid">
            <!--
                When the measurements variable has values in it we will draw a table with a header (thead) and
                add the data to the table (tbody). We use the foreach to loop over te list of measurements and
                a single line <tr> is added for each of the indivudial measurement objects. Colums are seperated
                using <th> for the header or <td> for the body as you can see in the code below.
            -->
            <h1>Detailed Overview</h1>
            <p>In this table you can view your energy usage and cost per hour.</p>
            <table class="custom-table" style="width: 60%">
                <thead>
                    <tr>
                        <th>Timestamp (UTC)</th>
                        <th>Energy Usage</th>
                        <th>€@ActiveSettings.GetCost() * KWH</th>
                        <th>Dynamic Cost</th>
                        <th>Dynamic price for 1KWH</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var measurement in customMeasurements)
                    {
                        <tr>
                            <td>@measurement.date</td>
                            <td>@RoundWithDecimal(measurement.hourlyEnergy, 2)KWH</td>
                            <td>€@RoundWithDecimal(measurement.GetHourCost((double)ActiveSettings.GetCost())[1], 2)</td>
                            <td>€@RoundWithDecimal(measurement.GetHourCost((double)ActiveSettings.GetCost())[0], 2)</td>
                            <td>€@RoundWithDecimal(measurement.hourlyCost, 2)</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </section>
</div>

@code {
    [SupplyParameterFromForm]
    private Settings? ActiveSettings { get; set; }
    protected override void OnInitialized() => ActiveSettings ??= new();
    private List<Measurement>? measurements;
    private bool error = false;
    private List<CustomMeasurement> customMeasurements = [];
    private List<CustomMeasurement> dailyMeasurements = [];
    private LineChart lineChart = default!;
    private DateTime today = DateTime.Now;
    private double? tempCost = 0.25;

    public double RoundWithDecimal(double value, int amountOfDecimals)
    {
        return Math.Round(value, amountOfDecimals);
    }


    protected override async Task OnInitializedAsync()
    {
        await FetchAndRenderData();
    }

    private async Task convertMeassurements()
    {
        double electricityOffset = measurements[0].Value ?? 0.0;
        double lastElectricityValue = measurements[0].Value ?? 0.0;
        double totalDynamicCost = 0.0;
        customMeasurements = [];
        int currentDay = -1;
        double electricityToday = 0.0;
        double dynamicCostToday = 0.0;
        dailyMeasurements = [];
        foreach (var measurement in measurements)
        {
            if (measurement.Timestamp.DayOfYear != currentDay)
            {
                if (currentDay != -1)
                {
                    dailyMeasurements.Add(customMeasurements[customMeasurements.Count - 1]);
                }
                electricityToday = 0.0;
                dynamicCostToday = 0.0;
                currentDay = measurement.Timestamp.DayOfYear;
            }
            double hourlyEnergy = (double)measurement.Value - lastElectricityValue;
            electricityToday += hourlyEnergy;
            dynamicCostToday += hourlyEnergy * (double)measurement.EnergyPrice;
            totalDynamicCost += hourlyEnergy * (double)measurement.EnergyPrice;
            customMeasurements.Add(new CustomMeasurement(measurement, electricityOffset, hourlyEnergy, totalDynamicCost,
            electricityToday, dynamicCostToday));
            lastElectricityValue = (double)measurement.Value;
        }
        dailyMeasurements.Add(customMeasurements[customMeasurements.Count - 1]);
        dailyMeasurements.Reverse();
        customMeasurements.RemoveAt(0);
        customMeasurements.Reverse();

    }

    private async Task FetchAndRenderData()
    {
        int meterId = ConvertHexToInt(ActiveSettings.machineIdentifier);
        int numberOfDays = ActiveSettings.daysSince;
        string aggregationWindow = "60m";

        measurements = await this.measurementRepository.GetEnergyConsumed(meterId, numberOfDays, aggregationWindow);
        if (measurements.Count < 1)
        {
            error = true;
            return;
        }
        error = false;

        measurements.RemoveAt(measurements.Count - 1);

        await convertMeassurements();
        // measurements.Reverse();
        await RenderMyGraph();
        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await RenderMyGraph();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private int ConvertHexToInt(string hexString)
    {
        try
        {
            return (int)Convert.ToUInt32(hexString, 16);
        }
        catch (Exception e)
        {
            error = true;
            return 0;
        }
    }

    private async Task Submit()
    {
        measurements = null;
        Logger.LogInformation("Id = {Id}", ActiveSettings?.machineIdentifier);
        Logger.LogInformation("Cost = {Cost}", ActiveSettings?.cost);
        Logger.LogInformation("Date = {Date}", ActiveSettings?.date);

        ActiveSettings.cost = tempCost;

        if (ActiveSettings.date == null)
        {
            ActiveSettings.date = DateTime.Now.AddDays(-7);
        }
        int daysSince = (DateTime.Now.DayOfYear - ActiveSettings.date.DayOfYear);
        if (daysSince > 31)
        {
            daysSince = 31;
            ActiveSettings.date = DateTime.Now.AddDays(-31);
        }
        else if (daysSince < 1)
        {
            daysSince = 0;
            ActiveSettings.date = DateTime.Now.AddDays(0);
        }

        if (ActiveSettings.cost == null)
        {
            ActiveSettings.cost = 0.25;
        }

        if (ActiveSettings.machineIdentifier == null)
        {
            ActiveSettings.machineIdentifier = "17E437";
        }


        ActiveSettings.daysSince = daysSince + 1;

        await FetchAndRenderData();
        await RenderMyGraph();
    }


    public async Task RenderMyGraph()
    {
        await RenderWormAsync();
    }

    public class Settings
    {
        public string? machineIdentifier { get; set; }
        public double? cost { get; set; }
        public DateTime date { get; set; }
        public int daysSince { get; set; }

        public Settings()
        {
            machineIdentifier = "17E437";
            cost = 0.25;
            date = DateTime.Now.AddDays(-7);
            daysSince = 7;
        }

        public double GetCost()
        {
            return this.cost != null ? (double)this.cost : 0.25;
        }
    }

    public class CustomMeasurement
    {
        public DateTime date { get; set; }
        public double totalEnergy { get; set; }
        public double hourlyEnergy { get; set; }
        public double hourlyCost { get; set; }
        public double totalCost { get; set; }
        public double electricityOffset { get; set; }
        public double totalEnergyToday { get; set; }
        public double totalCostToday { get; set; }

        public CustomMeasurement(Measurement measurement, double electricityOffset, double hourlyEnergy, double totalCost,
        double electricityToday, double dynamicCostToday)
        {
            this.date = measurement.Timestamp;
            this.totalEnergy = (double)measurement.Value - electricityOffset;
            this.totalCost = totalCost;
            this.hourlyEnergy = hourlyEnergy;
            this.hourlyCost = (double)measurement.EnergyPrice;
            this.totalEnergyToday = electricityToday;
            this.totalCostToday = dynamicCostToday;
            this.electricityOffset = electricityOffset;
        }

        /*
        * Get Cost of this hour
        * 1st item is dynamic cost * energy
        * 2nd item is static cost * energy
        */
        public double[] GetHourCost(double staticCost)
        {
            return new double[] { this.hourlyEnergy * this.hourlyCost, this.hourlyEnergy * staticCost };
        }

        /*
        * Get Cost of this day up to this hour
        * 1st item is dynamic cost * energy
        * 2nd item is static cost * energy
        */
        public double[] GetDayCost(double staticCostPerHour)
        {
            return new double[] { this.totalCostToday, this.totalEnergyToday * staticCostPerHour };
        }

        /*
        * Get Cost of all energy in this period up to this hour.
        * 1st item is dynamic cost * energy
        * 2nd item is static cost * energy
        */
        public double[] GetTotalCost(double staticCostPerHour)
        {
            return new double[] { this.totalCost, this.totalEnergy * staticCostPerHour };
        }

        /*
        * Get Cost of all energy in this period up to this hour since previous timestamp.
        * 1st item is dynamic cost * energy
        * 2nd item is static cost * energy
        *
        * If given timestamp is later, will result in negative costs.
        */
        public double[] GetCostSince(double staticCostPerHour, CustomMeasurement timestamp)
        {
            return new double[] { this.totalCost - timestamp.totalCost, (this.totalEnergy - timestamp.totalEnergy) *
staticCostPerHour };
        }

        /*
        * Get energy usage since previous timestamp.
        * If given timestamp is later, will result in negative return value.
        */
        public double GetEnergySince(CustomMeasurement timestamp)
        {
            return this.totalEnergy - timestamp.totalEnergy;
        }
    }

    private async Task RenderWormAsync()
    {
        List<CustomMeasurement> usedMeasurements = dailyMeasurements.Count > 4 ? dailyMeasurements : customMeasurements;

        List<string> graphLabels = [];
        List<double?> dynamicCosts = [];
        List<double?> staticCosts = [];
        foreach (CustomMeasurement measurement in usedMeasurements)
        {
            graphLabels.Add(measurement.date.ToString("dd-MM-yyyy HH:mm"));
            double[] costs = dailyMeasurements.Count > 4 ? measurement.GetDayCost(ActiveSettings.GetCost()) :
            measurement.GetHourCost(ActiveSettings.GetCost());
            dynamicCosts.Add(costs[0]);
            staticCosts.Add(costs[1]);
        }

        graphLabels.Reverse();
        dynamicCosts.Reverse();
        staticCosts.Reverse();
        var data = new ChartData
            {
                Labels = graphLabels,
                Datasets = new List<IChartDataset>()
{
new LineChartDataset()
{
Label = "Dynamic Price",
Data = dynamicCosts,
BackgroundColor = "rgb(255, 166, 0)",
BorderColor = "rgb(255, 166, 0)",
BorderWidth = 2,
HoverBorderWidth = 4,
//PointBackgroundColor = "rgb(88, 80, 141)",
//PointBorderColor = "rgb(88, 80, 141)",
//PointRadius = 0, // hide points
//PointHoverRadius = 4,
},
new LineChartDataset()
{
Label = $"\u20ac{ActiveSettings.GetCost()} * KWH",
Data = staticCosts,
BackgroundColor = "rgb(88, 80, 141)",
BorderColor = "rgb(88, 80, 141)",
BorderWidth = 2,
HoverBorderWidth = 4,
// PointBackgroundColor = "rgb(255, 166, 0)",
// PointBorderColor = "rgb(255, 166, 0)",
// PointRadius = 0, // hide points
// PointHoverRadius = 4,
}
}
            };

        var options = new LineChartOptions();

        options.Interaction.Mode = InteractionMode.Index;

        options.Plugins.Title!.Text = $"2019-ETI-EMON-V01-{ActiveSettings.machineIdentifier}-16405E";
        options.Plugins.Title.Display = true;
        options.Plugins.Title.Font = new ChartFont { Size = 20 };

        options.Responsive = true;

        options.Scales.X!.Title = new ChartAxesTitle { Text = dailyMeasurements.Count > 4 ? "Days" : "Hours", Display = true };
        options.Scales.Y!.Title = new ChartAxesTitle { Text = "Cost in Euros", Display = true };

        if (lineChart != null)
        {
            await lineChart.InitializeAsync(data, options);
        }
        // StateHasChanged();
    }
}
<script>
    // This piece of code is made by Thomas, so that we wouldn't have clashing styling once we merge our pages together.
    //Dynamically changes the full article box to the right styling to not mess with other pages
    var articlebox = document.getElementById("mainArticle");
    articlebox.classList.add("costVisualizerPage");

    //Same with navbar (twice cuz funky naming)
    var navbars = document.getElementsByClassName("nav-scrollable");
    for (let i = 0; i < navbars.length; i++) {
        navbars[i].classList.add("costVisualizerNavbar");
    }
    var navbars = document.getElementsByClassName("top-row");
    for (let i = 0; i < navbars.length; i++) {
        navbars[i].classList.add("costVisualizerNavbar");
    }   
</script>
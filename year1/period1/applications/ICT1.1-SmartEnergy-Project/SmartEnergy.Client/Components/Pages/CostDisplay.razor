@page "/costDisplay"
@attribute [StreamRendering]
@inject IMeasurementRepository measurementRepository;
@inject ILogger<CostDisplay> Logger

<PageTitle>CostDisplay</PageTitle>

<header>
    <h1>Martijn van Houwelingen.</h1>

    <p>Dit is de beschrijving.</p>
</header>
<main>
    <section style="display:flex; column-gap: 1rem;">
        <form method="post" @onsubmit="Submit" @formname="starship-plain-form">
        <AntiforgeryToken />
            <div class="input-group" style="column-gap: 1rem; flex-wrap: nowrap;">
                <div class="input-group">
                    <label for="meterId">Meter ID:</label>
                    <div class="input-group mb-3">
                        <span class="input-group-text">2019-ETI-EMON-V01-</span>
                    
                        <InputText @bind-Value="Model!.machineIdentifier" id="machineIdentifier" />
                        <span class="input-group-text">-16405E</span>
                    </div>
                </div>
                <div class="mb-3">
                    <label for="cost">Cost per KWH:</label>
                    <InputNumber @bind-Value="Model!.cost" class="form-control" placeholder="Value per hour"  id="cost" step="0.01" />
                </div>
                <div class="mb-3">
                    <input type="date" TValue="DateOnly" @bind-value="@date1" Placeholder="Enter Date" />
                </div>
                <div class="mb-3">Entered date: @date1</div>
            </div>
            <div>
                <button type="submit">Submit</button>
            </div>
        </form>
        
    </section>
</main>
<style>
    header {
        background-color: aqua;
    }
</style>
<script defer>
    console.log('CostDisplay page loaded'); 
    setTimeout(() => {
        onInit();
    }, 1000);

    function onInit() {
        const mySettings = localStorage.getItem('avans-smartmeter-settings');
        if (!mySettings) {
            var currentSettings = { 
                machineIdentifier: document.getElementById('machineIdentifier').value,
                cost: document.getElementById('cost').value 
            };
            localStorage.setItem('avans-smartmeter-settings', JSON.stringify(currentSettings));
        } else {
            const currentSettings = JSON.parse(mySettings);
            document.getElementById('machineIdentifier').value = currentSettings.machineIdentifier;
            document.getElementById('cost').value = currentSettings.cost;
        }
        document.getElementById('machineIdentifier').addEventListener('change', onChange);
        document.getElementById('cost').addEventListener('change', onChange);
    }

    function onChange() {
        var currentSettings = { 
            machineIdentifier: document.getElementById('machineIdentifier').value,
            cost: document.getElementById('cost').value 
        };
        localStorage.setItem('avans-smartmeter-settings', JSON.stringify(currentSettings));
    }
</script>

@if (measurements == null)
{
    <p><em>Data wordt geladen...</em></p>
}
else
{
    <!--
        When the measurements variable has values in it we will draw a table with a header (thead) and
        add the data to the table (tbody). We use the foreach to loop over te list of measurements and
        a single line <tr> is added for each of the indivudial measurement objects. Colums are seperated
        using <th> for the header or <td> for the body as you can see in the code below.
    -->
    <table class="table">
        <thead>
            <tr>
                <th>Timestamp (UTC)</th>
                <th>Location ID</th>
                <th>Sensor</th>
                <th>Value</th>
                <th>Unit</th>
                <th>Price (energy only)</th>
                <th>Temperature</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var measurement in measurements)
            {
                <tr>
                    <td>@measurement.Timestamp</td>
                    <td>@measurement.LocationId</td>
                    <td>@measurement.Sensor</td>
                    <td>@measurement.Value</td>
                    <td>@measurement.Unit</td>
                    <td>@measurement.EnergyPrice</td>
                    <td>@measurement.Temperature</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [SupplyParameterFromForm]
    private Settings? Model { get; set; }
    protected override void OnInitialized() => Model ??= new();
    private List<Measurement>? measurements;
    private DateOnly date1 = DateOnly.FromDateTime(DateTime.Now.AddDays(1));

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("My debug output.");
        
        int meterId = 15433042;

        int numberOfDays = 3;
        
        string aggegationWindow = "5m";

        measurements = await this.measurementRepository.GetEnergyConsumed(meterId, numberOfDays, aggegationWindow);
    }

    private void Submit()
    {
        Logger.LogInformation("Id = {Id}", Model?.machineIdentifier);
    }

    public class Settings
    {
        public string? machineIdentifier { get; set; }
        public double? cost { get; set; }

        public Settings()
        {
            machineIdentifier = "17E437";
            cost = 0.25;
        }
    }
}
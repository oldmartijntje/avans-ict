@page "/costDisplay"
@attribute [StreamRendering]
@inject IMeasurementRepository measurementRepository;
@inject ILogger<CostDisplay> Logger
@using System.Globalization;
@rendermode InteractiveServer

<PageTitle>CostDisplay</PageTitle>

@* https://demos.blazorbootstrap.com/form/date-input *@
<header>
    <h1>Martijn van Houwelingen.</h1>

    <p>Dit is de beschrijving.</p>
</header>
<article>
    <section style="display:flex; column-gap: 1rem;">
        <form method="post" @onsubmit="Submit" @formname="starship-plain-form" id="myForm">
            <AntiforgeryToken />
            <div style="row-gap: 1rem; flex-wrap: wrap; flex-direction: column;">
                <div class="input-group" style="column-gap: 1rem; flex-wrap: nowrap;">
                    <div class="input-group">
                        <label for="meterId">Meter ID:</label>
                        <div class="input-group mb-3" style="flex-wrap: nowrap;">
                            <span class="input-group-text">2019-ETI-EMON-V01-</span>
                        
                            <InputText @bind-Value="ActiveSettings!.machineIdentifier" id="machineIdentifier" />
                            <span class="input-group-text">-16405E</span>
                        </div>
                    </div>
                    <div class="input-group">
                        <label for="cost">Cost per KWH:</label>
                        <div class="mb-3 input-group">
                            <span class="input-group-text">â‚¬</span>
                            <InputNumber @bind-Value="ActiveSettings!.cost" class="form-control" placeholder="Value per hour"  id="cost" step="0.01" />
                        </div>
                    </div>
                </div>
                <div class="input-group">
                    <div class="mb-3">
                        <InputDate @bind-Value="ActiveSettings!.date" TValue="DateTime" Placeholder="Enter start Date" id="date" class="form-control"/>
                    </div>
                    <div class="mb-3" style="margin-left: 0.5rem;">
                        <InputDate @bind-Value="@today" TValue="DateTime" Placeholder="Enter end Date" disabled="true" id="dateNow" class="form-control"/>
                    </div>
                    <div class="mb-3" style="margin-left: 1.5rem;">
                        <button type="submit" class="btn btn-primary" id="submitButton">Refresh</button>
                    </div>
                    
                    
                </div>
            </div>
        </form>
    </section>
    @if (measurements == null)
    {
        <p><em>Data wordt geladen...</em></p>
    }
    else
    {
        <LineChart @ref="lineChart" Width="800" Height="300" />
    <!--
        When the measurements variable has values in it we will draw a table with a header (thead) and
        add the data to the table (tbody). We use the foreach to loop over te list of measurements and
        a single line <tr> is added for each of the indivudial measurement objects. Colums are seperated
        using <th> for the header or <td> for the body as you can see in the code below.
    -->
    <table class="table">
        <thead>
        <tr>
            <th>Timestamp (UTC)</th>
            <th>GetHourCost Dynamic</th>
            <th>GetDayCost Dynamic</th>
            <th>GetTotalCost Dynamic</th>
            <th>GetHourCost Static</th>
            <th>GetDayCost Static</th>
            <th>GetTotalCost Static</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var measurement in customMeasurements)
        {

            <tr>
                
                <td>@getLocalTime(measurement.date)</td>
                <td>@measurement.GetHourCost((double)ActiveSettings.cost)[0]</td>
                <td>@measurement.GetDayCost((double)ActiveSettings.cost)[0]</td>
                <td>@measurement.GetTotalCost((double)ActiveSettings.cost)[0]</td>
                <td>@measurement.GetHourCost((double)ActiveSettings.cost)[1]</td>
                <td>@measurement.GetDayCost((double)ActiveSettings.cost)[1]</td>
                <td>@measurement.GetTotalCost((double)ActiveSettings.cost)[1]</td>
            </tr>
        }
        </tbody>
    </table>
    }
</article>
<style>
    header {
        background-color: #005eff;
    }
</style>

@code {
    [SupplyParameterFromForm]
    private Settings? ActiveSettings { get; set; }
    protected override void OnInitialized() => ActiveSettings ??= new();
    private List<Measurement>? measurements;
    private List<CustomMeasurement> customMeasurements = [];
    private LineChart lineChart = default!;
    private DateTime today = DateTime.Now;


    protected override async Task OnInitializedAsync()
    {
        await FetchAndRenderData();
    }

    public string getLocalTime(DateTime utcTimestamp)
    {
        // To check wether it was displaying UTC or nl 
        return utcTimestamp.ToString(new CultureInfo("nl-nl"));
    }

    private async Task convertMeassurements()
    {
        double electricityOffset = measurements[0].Value ?? 0.0;
        double lastElectricityValue = measurements[0].Value ?? 0.0;
        double totalDynamicCost = 0.0;
        customMeasurements = [];
        int currentDay = -1;
        double electricityToday = 0.0;
        double dynamicCostToday = 0.0;
        foreach (var measurement in measurements)
        {
            if (measurement.Timestamp.DayOfYear != currentDay)
            {
                electricityToday = 0.0;
                dynamicCostToday = 0.0;
            }
            double hourlyEnergy = (double)measurement.Value - lastElectricityValue;
            electricityToday += hourlyEnergy;
            dynamicCostToday += hourlyEnergy * (double)measurement.EnergyPrice;
            totalDynamicCost += hourlyEnergy * (double)measurement.EnergyPrice;
            customMeasurements.Add( new CustomMeasurement(measurement, electricityOffset, hourlyEnergy, totalDynamicCost, electricityToday, dynamicCostToday));
            lastElectricityValue = (double)measurement.Value;
        }
        
    }
    
    private async Task FetchAndRenderData()
    {
        int meterId = ConvertHexToInt(ActiveSettings.machineIdentifier);
        int numberOfDays = ActiveSettings.daysSince;
        string aggregationWindow = "60m";

        measurements = await this.measurementRepository.GetEnergyConsumed(meterId, numberOfDays, aggregationWindow);
        measurements.RemoveAt(measurements.Count -1);

        await convertMeassurements();
        // measurements.Reverse();
        await RenderMyGraph();
        StateHasChanged();
    }
    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await RenderMyGraph();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private int ConvertHexToInt(string hexString)
    {
        return (int)Convert.ToUInt32(hexString, 16);
    }

    private async Task Submit()
    {
        measurements = null;
        Logger.LogInformation("Id = {Id}", ActiveSettings?.machineIdentifier);
        Logger.LogInformation("Cost = {Cost}", ActiveSettings?.cost);
        Logger.LogInformation("Date = {Date}", ActiveSettings?.date);

        if (ActiveSettings.date == null)
        {
            ActiveSettings.date = DateTime.Now.AddDays(-7);
        }
        int daysSince = (DateTime.Now.DayOfYear - ActiveSettings.date.DayOfYear);
        if (daysSince > 31)
        {
            daysSince = 31;
            ActiveSettings.date = DateTime.Now.AddDays(-31);
        }
        else if (daysSince < 1) 
        {
            daysSince = 0;
            ActiveSettings.date = DateTime.Now.AddDays(0);
        }

        ActiveSettings.daysSince = daysSince + 1;

        await FetchAndRenderData();
        await RenderMyGraph();
    }


    public async Task RenderMyGraph()
    {
        await RenderWormAsync();
    }

    public class Settings
    {
        public string? machineIdentifier { get; set; }
        public double? cost { get; set; }
        public DateTime date { get; set; }
        public int daysSince { get; set; }

        public Settings()
        {
            machineIdentifier = "17E437";
            cost = 0.25;
            date = DateTime.Now.AddDays(-7);
            daysSince = 7;
        }
    }

    public class CustomMeasurement
    {
        public DateTime date { get; set; }
        public double totalEnergy { get; set; }
        public double hourlyEnergy { get; set; }
        public double hourlyCost { get; set; }
        public double totalCost  { get; set; }
        public double electricityOffset { get; set; }
        public double totalEnergyToday { get; set; }
        public double totalCostToday  { get; set; }

        public CustomMeasurement(Measurement measurement, double electricityOffset, double hourlyEnergy, double totalCost, double electricityToday, double dynamicCostToday)
        {
            this.date = measurement.Timestamp;
            this.totalEnergy = (double)measurement.Value - electricityOffset;
            this.totalCost = totalCost;
            this.hourlyEnergy = hourlyEnergy;
            this.hourlyCost = (double)measurement.EnergyPrice;
            this.totalEnergyToday = electricityToday;
            this.totalCostToday = dynamicCostToday;
            this.electricityOffset = electricityOffset;
        }

        /*
         * Get Cost of this hour
         * 1st item is dynamic cost * energy
         * 2nd item is static cost * energy
         */
        public double[] GetHourCost(double staticCost)
        {
            return new double[] { this.hourlyEnergy * this.hourlyCost, this.hourlyEnergy * staticCost };
        }
        
        /*
         * Get Cost of this day up to this hour
         * 1st item is dynamic cost * energy
         * 2nd item is static cost * energy
         */
        public double[] GetDayCost(double staticCostPerHour)
        {
            return new double[] { this.totalCostToday, this.totalEnergyToday * staticCostPerHour };
        }

        /*
         * Get Cost of all energy in this period up to this hour.
         * 1st item is dynamic cost * energy
         * 2nd item is static cost * energy
         */
        public double[] GetTotalCost(double staticCostPerHour)
        {
            return new double[] { this.totalCost, this.totalEnergy * staticCostPerHour };
        }
    }
    
    private async Task RenderWormAsync()
    {
        var data = new ChartData
            {
                Labels = new List<string> { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" },
                Datasets = new List<IChartDataset>()
                {
                    new LineChartDataset()
                    {
                        Label = "India",
                        Data = new List<double?>{ 9, 20, 29, 33, 50, 66, 75, 86, 91, 105, 120, 126, 141, 150, 156, 164, 177, 180, 184, 195 },
                        BackgroundColor = "rgb(88, 80, 141)",
                        BorderColor = "rgb(88, 80, 141)",
                        BorderWidth = 2,
                        HoverBorderWidth = 4,
                        //PointBackgroundColor = "rgb(88, 80, 141)",
                        //PointBorderColor = "rgb(88, 80, 141)",
                        //PointRadius = 0, // hide points
                        //PointHoverRadius = 4,
                    },
                    new LineChartDataset()
                    {
                        Label = "England",
                        Data = new List<double?>{ 1, 1, 8, 19, 24, 26, 39, 47, 56, 66, 75, 88, 95, 100, 109, 114, 124, 129, 140, 142 },
                        BackgroundColor = "rgb(255, 166, 0)",
                        BorderColor = "rgb(255, 166, 0)",
                        BorderWidth = 2,
                        HoverBorderWidth = 4,
                        // PointBackgroundColor = "rgb(255, 166, 0)",
                        // PointBorderColor = "rgb(255, 166, 0)",
                        // PointRadius = 0, // hide points
                        // PointHoverRadius = 4,
                    }
                }
            };

        var options = new LineChartOptions();

        options.Interaction.Mode = InteractionMode.Index;

        options.Plugins.Title!.Text = "WORM";
        options.Plugins.Title.Display = true;
        options.Plugins.Title.Font = new ChartFont { Size = 20 };

        options.Responsive = true;

        options.Scales.X!.Title = new ChartAxesTitle { Text = "Overs", Display = true };
        options.Scales.Y!.Title = new ChartAxesTitle { Text = "Runs", Display = true };

        if (lineChart != null)
        {
        await lineChart.InitializeAsync(data, options);
        }
        // StateHasChanged();
    }
}